from langgraph.graph import START, END, StateGraph
from typing import List, DefaultDict, TypedDict

from src.chatbot.agents import VectorDBRetrievalAgent, KGDBRetrievalAgent, WebSearchAgent, AnswerGenerationAgent, AnswerGradingAgent, AnswerRefineAgent, decide_metrics_agent

class GraphState(TypedDict):
    """
    Represents the state of a graph.

    Attributes:
        query (str): The user query
        query_list (List[str]): The expanded list of queries based on the user query
        agent (str): The agent responsible for decision making/answer generating
        --- DEPRECATED --- contexts (DefaultDict[str, str]): The contexts retrieved. Keys are "kg" or "db" indicating the source of the context, and values are the contexts themselves.
        kg_context (str): The context retrieved from the knowledge graph
        db_context (str): The context retrieved from the vector database
        websearch_context (str): The context retrieved from the web search
        metrics (DefaultDict[str, str]): The numerical evaluations of metrics, such as "correctness", "relevance", "clarity", etc.
        reasons (DefaultDict[str, str]): The reasons for the the metrics. Keys are the metric names, and values are the reasons.
        answer (str): The answer generated by the agent
    """
    query: str
    query_list: List[str]
    agent: str
    # contexts: Annotated[DefaultDict[str, str], reduce_defaultdicts]
    kg_context: str
    db_context: str
    websearch_context: str
    metrics: DefaultDict[str, str]
    reasons: DefaultDict[str, str]
    answer: str
    
# retrieval agents
retrieve_db_agent = VectorDBRetrievalAgent()
retrieve_kg_agent = KGDBRetrievalAgent()
websearch_agent = WebSearchAgent()

# generation agents
generate_answer_agent = AnswerGenerationAgent()
grader_agent = AnswerGradingAgent()
refine_answer_agent = AnswerRefineAgent()
    
def get_graph():
    builder = StateGraph(GraphState)

    builder.add_node("search_kg_db", retrieve_kg_agent)
    builder.add_node("search_vector_db", retrieve_db_agent)
    builder.add_node("generate_answer", generate_answer_agent)
    builder.add_node("grader", grader_agent)
    builder.add_node("websearch", websearch_agent)
    builder.add_node("refine_answer", refine_answer_agent)
    
    builder.add_edge(START, "search_vector_db")
    builder.add_edge(START, "search_kg_db")

    builder.add_edge(["search_kg_db", "search_vector_db"], "generate_answer")
    builder.add_edge("generate_answer", "grader")

    builder.add_conditional_edges(
        "grader",
        decide_metrics_agent,
        {
            "good": END,
            "not good enough": "websearch"
        }
    )
    
    builder.add_edge("websearch", "refine_answer")

    builder.add_edge("refine_answer", "grader")

    graph = builder.compile()
    
    return graph

graph = get_graph()